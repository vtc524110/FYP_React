{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\bidding\\\\src\\\\components\\\\Records\\\\Biddings.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nclass B戈木木戈弓 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    // Remove the 'www.' to cause a CORS error (and see the error state)\n    axios.get(`http://www.reddit.com/r/${this.props.subreddit}.json`).then(res => {\n      // Transform the raw data by extracting the nested posts\n      const posts = res.data.data.children.map(obj => obj.data); // Update state to trigger a re-render.\n      // Clear any errors, and turn off the loading indiciator.\n\n      this.setState({\n        posts,\n        loading: false,\n        error: null\n      });\n    }).catch(err => {\n      // Something went wrong. Save the error in state and re-render.\n      this.setState({\n        loading: false,\n        error: err\n      });\n    });\n  }\n\n  renderLoading() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  }\n\n  renderError() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, \"Uh oh: \", this.state.error.message);\n  }\n\n  renderPosts() {\n    if (this.state.error) {\n      return this.renderError();\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, this.state.posts.map(post => /*#__PURE__*/React.createElement(\"li\", {\n      key: post.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, post.title)));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, `/r/${this.props.subreddit}`), this.state.loading ? this.renderLoading() : this.renderPosts());\n  }\n\n} // Change the subreddit to anything you like\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(FetchDemo, {\n  subreddit: \"reactjs\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["D:/React/bidding/src/components/Records/Biddings.js"],"names":["React","ReactDOM","axios","B戈木木戈弓","Component","constructor","props","state","posts","loading","error","componentDidMount","get","subreddit","then","res","data","children","map","obj","setState","catch","err","renderLoading","renderError","message","renderPosts","post","id","title","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,OAAO,EAAE,IAFA;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAW,2BAA0B,KAAKN,KAAL,CAAWO,SAAU,OAA1D,EACKC,IADL,CACUC,GAAG,IAAI;AACT;AACA,YAAMP,KAAK,GAAGO,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcC,QAAd,CAAuBC,GAAvB,CAA2BC,GAAG,IAAIA,GAAG,CAACH,IAAtC,CAAd,CAFS,CAIT;AACA;;AACA,WAAKI,QAAL,CAAc;AACVZ,QAAAA,KADU;AAEVC,QAAAA,OAAO,EAAE,KAFC;AAGVC,QAAAA,KAAK,EAAE;AAHG,OAAd;AAKH,KAZL,EAaKW,KAbL,CAaWC,GAAG,IAAI;AACV;AACA,WAAKF,QAAL,CAAc;AACVX,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,KAAK,EAAEY;AAFG,OAAd;AAIH,KAnBL;AAoBH;;AAEDC,EAAAA,aAAa,GAAG;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACY,KAAKjB,KAAL,CAAWG,KAAX,CAAiBe,OAD7B,CADJ;AAKH;;AAEDC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKnB,KAAL,CAAWG,KAAf,EAAsB;AAClB,aAAO,KAAKc,WAAL,EAAP;AACH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKjB,KAAL,CAAWC,KAAX,CAAiBU,GAAjB,CAAqBS,IAAI,iBACtB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACE,KAAxB,CADH,CADL,CADJ;AAOH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,MAAK,KAAKxB,KAAL,CAAWO,SAAU,EAAhC,CADJ,EAEK,KAAKN,KAAL,CAAWE,OAAX,GACG,KAAKc,aAAL,EADH,GAEK,KAAKG,WAAL,EAJV,CADJ;AAQH;;AAtEgC,C,CAyErC;;;AACAzB,QAAQ,CAAC6B,MAAT,eACI,oBAAC,SAAD;AAAW,EAAA,SAAS,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\n\r\nclass B戈木木戈弓 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            posts: [],\r\n            loading: true,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Remove the 'www.' to cause a CORS error (and see the error state)\r\n        axios.get(`http://www.reddit.com/r/${this.props.subreddit}.json`)\r\n            .then(res => {\r\n                // Transform the raw data by extracting the nested posts\r\n                const posts = res.data.data.children.map(obj => obj.data);\r\n\r\n                // Update state to trigger a re-render.\r\n                // Clear any errors, and turn off the loading indiciator.\r\n                this.setState({\r\n                    posts,\r\n                    loading: false,\r\n                    error: null\r\n                });\r\n            })\r\n            .catch(err => {\r\n                // Something went wrong. Save the error in state and re-render.\r\n                this.setState({\r\n                    loading: false,\r\n                    error: err\r\n                });\r\n            });\r\n    }\r\n\r\n    renderLoading() {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    renderError() {\r\n        return (\r\n            <div>\r\n                Uh oh: {this.state.error.message}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPosts() {\r\n        if (this.state.error) {\r\n            return this.renderError();\r\n        }\r\n\r\n        return (\r\n            <ul>\r\n                {this.state.posts.map(post =>\r\n                    <li key={post.id}>{post.title}</li>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{`/r/${this.props.subreddit}`}</h1>\r\n                {this.state.loading ?\r\n                    this.renderLoading()\r\n                    : this.renderPosts()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Change the subreddit to anything you like\r\nReactDOM.render(\r\n    <FetchDemo subreddit=\"reactjs\" />,\r\n    document.getElementById('root')\r\n);\r\n"]},"metadata":{},"sourceType":"module"}